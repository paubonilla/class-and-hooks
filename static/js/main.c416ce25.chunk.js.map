{"version":3,"sources":["components/classComponent/ClassComponent.js","components/useState/HooksComponent.js","components/useState/PrevState.js","components/useState/HooksObjects.js","styled/index.js","components/classComponent/PrevClass.js","App.js","serviceWorker.js","index.js"],"names":["ClassComponent","props","incrementCount","setState","count","state","onClick","this","Component","HooksComponent","useState","setCount","HooksCounterTwo","prevCount","i","HooksObjects","firstName","lastName","name","setName","className","type","maxlength","value","onChange","e","target","Wrapper","styled","div","Inner","Class","Hooks","PrevClass","resetCount","initialCount","decrementCount","App","PrevState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c416ce25.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class ClassComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            count: 0\n        }\n    }\n\n    incrementCount = () => {\n        this.setState({\n            count: this.state.count + 1\n        })\n    }\n    render() {\n        return (\n            <div>\n                <button onClick={this.incrementCount}>Class Counter {this.state.count}</button>\n            </div>\n        )\n    }\n}\n","import React, { useState } from 'react'\n\nfunction HooksComponent() {\n    const [count, setCount] = useState(0)\n    return (\n        <div>\n            <button onClick={() => setCount(count + 1)}>Hooks Counter {count}</button>\n        </div>\n    )\n}\n\nexport default HooksComponent\n","import React, { useState } from 'react'\n\nfunction HooksCounterTwo() {\n    const initialCount = 0\n    const [count, setCount] = useState(initialCount)\n    // count is the current value of state variable\n    // setCount is a method that can update the state variable\n\n    const incrementByFive = () => {\n        for (let i = 0; i < 5; i++) {\n            setCount(prevCount => prevCount + 1)\n        }\n    }\n    return (\n        <div>\n            <p>Count: {count}</p>\n            <button onClick={() => setCount(initialCount)}>Reset</button>\n            <button onClick={() => setCount(prevCount => prevCount + 1)}>Add</button>\n            <button onClick={() => setCount(prevCount => prevCount - 1)}>Minus</button>\n            <button onClick={incrementByFive}>Add 5</button>\n        </div>\n    )\n}\n\nexport default HooksCounterTwo\n","import React, { useState } from 'react'\n\nfunction HooksObjects() {\n    const resetName = ''\n    const [name, setName] = useState({ firstName: '', lastName: '' })\n    return (\n        <form className=\"form\">\n            <div>\n                <p>First name</p>\n                <input\n                    type=\"text\"\n                    className=\"input\"\n                    maxlength=\"30\"\n                    value={name.firstName}\n                    onChange={e => setName({ ...name, firstName: e.target.value })}\n                />\n            </div>\n            <div>\n                <p>Last name</p>\n                <input\n                    type=\"text\"\n                    className=\"input\"\n                    maxlength=\"30\"\n                    value={name.lastName}\n                    onChange={e => setName({ ...name, lastName: e.target.value })}\n                />\n            </div>\n            <div>\n                <h3>{name.firstName} {name.lastName}</h3>\n            </div>\n            <button className=\"reset-button\" onClick={() => setName(resetName)}>Reset Name</button>\n        </form>\n    )\n}\n\nexport default HooksObjects\n","import styled from 'styled-components'\n\nexport const Wrapper = styled.div`\n  width: 800px;\n  margin: 0 auto;\n`\n\nexport const Inner = styled.div`\n  width: 100%;\n  height: 100vh;\n  display: flex;\n  flex-direction: row;\n`\n\nexport const Class = styled.div`\n  background: #00B499;\n  height: 100%;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n`\n\nexport const Hooks = styled.div`\n  background: #D96C75;\n  height: 100%;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n`","import React, { Component } from 'react'\n\nexport default class PrevClass extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            initialCount: 0,\n            count: 0\n        }\n    }\n\n    resetCount = () => {\n        this.setState({\n            count: this.state.initialCount\n        })\n    }\n\n    incrementCount = () => {\n        this.setState({\n            count: this.state.count + 1\n        })\n    }\n\n    decrementCount = () => {\n        this.setState({\n            count: this.state.count - 1\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <p>Count {this.state.count}</p>\n                <button onClick={this.resetCount}>Reset</button>\n                <button onClick={this.incrementCount}>Add</button>\n                <button onClick={this.decrementCount}>Minus</button>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport './App.scss';\nimport ClassComponent from './components/classComponent/ClassComponent';\nimport HooksComponent from './components/useState/HooksComponent';\nimport PrevState from './components/useState/PrevState';\nimport HooksObjects from './components/useState/HooksObjects';\nimport { Wrapper, Inner, Class, Hooks } from './styled';\nimport PrevClass from './components/classComponent/PrevClass';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Wrapper>\n        <Inner>\n          <Class>\n            <p>&#47;&#47; this section is written in Class Component</p>\n            <ClassComponent />\n            <PrevClass />\n          </Class>\n          <Hooks>\n            <p>&#47;&#47; this section is written in Functional Component using &#123; useState &#125;</p>\n            <HooksComponent />\n            <PrevState />\n            <HooksObjects />\n          </Hooks>\n        </Inner>\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}